package me.cheezburga.skwe.elements.effects.regions;

import ch.njol.skript.Skript;
import ch.njol.skript.doc.Description;
import ch.njol.skript.doc.Examples;
import ch.njol.skript.doc.Name;
import ch.njol.skript.doc.RequiredPlugins;
import ch.njol.skript.doc.Since;
import ch.njol.skript.lang.Expression;
import ch.njol.skript.lang.SkriptParser.ParseResult;
import ch.njol.util.Kleenean;
import me.cheezburga.skwe.api.utils.RunnableUtils;
import me.cheezburga.skwe.api.utils.Utils;
import me.cheezburga.skwe.api.utils.regions.RegionWrapper;
import me.cheezburga.skwe.api.utils.regions.Runnables;
import me.cheezburga.skwe.lang.BlockingSyntaxStringBuilder;
import me.cheezburga.skwe.lang.SkWEEffect;
import org.bukkit.event.Event;
import org.jetbrains.annotations.Nullable;

@Name("Region - Regenerate")
@Description({
    "Regenerates the area within a given region while optionally regenerating biomes, using a given seed.",
    "The default seed is just the seed of the region's world, and biomes will not be regenerated by default."
})
@Examples({
    "regenerate {region} while regenerating biomes"
})
@Since("1.0.0")
@RequiredPlugins("WorldEdit")
public class EffRegenerate extends SkWEEffect {

    static {
        Skript.registerEffect(EffRegenerate.class, "regen[erate] %worldeditregions% [with seed %-number%] [biomes:while regen[erat]ing biomes]" + Utils.LAZILY);
    }

    private Expression<RegionWrapper> wrappers;
    private Expression<Number> seed;
    private boolean regenBiomes;

    @SuppressWarnings({"unchecked"})
    @Override
    public boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {
        wrappers = (Expression<RegionWrapper>) exprs[0];
        seed = (Expression<Number>) exprs[1];
        regenBiomes = parseResult.hasTag("biomes");
        setBlocking(!parseResult.hasTag("lazily"));
        return true;
    }

    @Override
    protected void execute(Event event) {
        @Nullable Long seed = this.seed != null ? (Long) this.seed.getSingle(event) : null;

        for (RegionWrapper wrapper : wrappers.getArray(event)) {
            RunnableUtils.run(Runnables.getRegenRunnable(wrapper, seed, regenBiomes), isBlocking());
        }
    }

    @Override
    public String toString(@Nullable Event event, boolean debug) {
        BlockingSyntaxStringBuilder builder = new BlockingSyntaxStringBuilder(event, debug, isBlocking())
            .append("regenerate ", wrappers);
        if (seed != null)
            builder.append(" with seed ", seed);
        if (regenBiomes)
            builder.append(" while regenerating biomes");
        return builder.toString();
    }
}
